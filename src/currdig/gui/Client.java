package currdig.gui;

import blockchain.utils.BlockChain;
import currdig.core.User;
import currdig.utils.RMI;
import currdig.utils.Utils;
import java.awt.HeadlessException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import p2p.IremoteP2P;

/**
 * Creates a new form Client. Initializes the client, discovers available P2P
 * nodes, and allows the user to connect to a node. If no nodes are available,
 * the application exits.
 */
public class Client extends javax.swing.JFrame {

    private IremoteP2P node;

    /**
     * Creates new form Client
     */
    public Client() {
        try {
            initComponents(); // Initialize the GUI components

            // Discover available P2P nodes
            List<String> availableServers = Utils.discoverServers();

            // If no nodes are found, show a message and exit the program
            if (availableServers.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No P2P nodes found. Please try again.");
                System.exit(0);
            }

            // Display the available servers for the user to select from
            String selectedServer = (String) JOptionPane.showInputDialog(this,
                    "Select a server to connect to:",
                    "Server Selection",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    availableServers.toArray(),
                    availableServers.get(0));

            // If the user clicked cancel or closed the dialog, exit the program
            if (selectedServer == null) {
                System.exit(0); // Exit the program
            }

            // If a valid server is selected, connect to it
            if (!selectedServer.isEmpty()) {
                node = (IremoteP2P) RMI.getRemote(selectedServer);
                System.out.println("Connected to remote P2P node at " + selectedServer);

                // Start health monitoring for the node
                startNodeHealthCheck(); // Start health monitoring in a separate thread
            }
        } catch (HeadlessException | MalformedURLException | NotBoundException | RemoteException ex) {
            JOptionPane.showMessageDialog(this, "Unexpected error: " + ex.getMessage());
            System.exit(1); // Exit the program if there is an error
        }
    }

    /**
     * Starts a thread to periodically check the health of the connected P2P
     * node. If the node becomes unavailable, the user is notified and
     * redirected to the Landing page.
     */
    private void startNodeHealthCheck() {
        new Thread(() -> {
            try {
                while (true) {
                    try {
                        // Perform a lightweight RMI call to check if the node is responsive
                        node.getAddress(); // If this call fails, the node is unresponsive
                    } catch (RemoteException e) {
                        // Notify the user
                        JOptionPane.showMessageDialog(this,
                                "Node is unavailable. Trying to find new server.",
                                "Node Unavailable",
                                JOptionPane.WARNING_MESSAGE);

                        // Redirect to Landing page
                        java.awt.EventQueue.invokeLater(() -> {
                            new Client().setVisible(true); // Show the Landing screen
                            this.dispose(); // Close the current Main instance
                        });

                        break; // Exit the health check loop
                    }

                    // Sleep before the next health check
                    Thread.sleep(5000); // Check every 5 seconds
                }
            } catch (HeadlessException | InterruptedException e) {
            }
        }).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnLogin = new javax.swing.JButton();
        txtUsername = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Student Viewer");

        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        txtUsername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUsernameKeyPressed(evt);
            }
        });

        jLabel1.setText("Username");

        jLabel2.setText("Password");

        txtPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPasswordKeyPressed(evt);
            }
        });

        jLabel3.setText("Digital Curriculum - Student Viewer");

        jLabel4.setText("Made by: 23193 Vasco Alves & 22912 Bruno Freitas");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtUsername)
                            .addComponent(btnLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(71, 71, 71)))
                .addContainerGap(111, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(4, 4, 4)
                .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnLogin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method is called when the user attempts to login. It validates the
     * credentials, authenticates with the node, and loads the user's data. It
     * also loads the blockchain and opens the Blockchain Explorer UI.
     *
     * @param evt The event triggered by the login button.
     */
    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // Retrieve the username and password from the text fields
        String username = txtUsername.getText();
        String password = new String(txtPassword.getPassword());

        // Validate input
        if (username.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Username and password are required.");
            return;
        }

        try {
            // Authenticate with the P2P node
            if (!node.authenticateWithConsensus(username, password)) {
                JOptionPane.showMessageDialog(this, "Invalid username or password.");
                return;
            }
        } catch (RemoteException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Retrieve the user object
        User user = null;
        try {
            user = node.getUser(username);
        } catch (RemoteException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            user.load(password);
        } catch (Exception ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }

        // If no exception was thrown, login is successful
        JOptionPane.showMessageDialog(this, "Login successful!");

        try {
            // Assuming blockchain has alredy been fetched
            BlockChain blockchain = node.getBlockchain();  // node.getBlockchain() loads the blockchain

            // Open the Blockchain Explorer UI in a separate thread to avoid blocking
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    try {
                        new blockchain.utils.BlockchainExplorer(blockchain, node, true);
                    } catch (RemoteException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });

            this.dispose();

        } catch (RemoteException e) {
            JOptionPane.showMessageDialog(null, "Failed to load blockchain", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    private void txtUsernameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUsernameKeyPressed
        // Check if the key pressed is the Enter key
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            btnLogin.doClick();
        }
    }//GEN-LAST:event_txtUsernameKeyPressed

    private void txtPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPasswordKeyPressed
        // Check if the key pressed is the Enter key
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            btnLogin.doClick();
        }
    }//GEN-LAST:event_txtPasswordKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
